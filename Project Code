from nicegui import ui, app
import os
import urllib.parse
import csv

ROOT_FOLDER = '.'
CSV_FILE = 'annotations.csv'
all_videos = []
current_index = 0
scroll_mode = False

app.add_static_files('/videos', ROOT_FOLDER)

# Create CSV if it doesn't exist
if not os.path.exists(CSV_FILE):
    with open(CSV_FILE, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['Video Name', 'Annotation'])

def scan_all_videos():
    all_videos.clear()
    for dirpath, _, files in os.walk(ROOT_FOLDER):
        for file in files:
            if file.lower().endswith(('.mp4', '.webm', '.ogg')):
                rel_folder = os.path.relpath(dirpath, ROOT_FOLDER).replace('\\', '/')
                encoded_folder = urllib.parse.quote(rel_folder) if rel_folder != '.' else ''
                encoded_file = urllib.parse.quote(file)
                url_path = f'/videos/{encoded_folder}/{encoded_file}' if encoded_folder else f'/videos/{encoded_file}'
                display_name = os.path.splitext(file)[0]
                all_videos.append({'name': display_name, 'folder': rel_folder, 'url': url_path})

def get_filtered_videos():
    name_query = name_input.value.strip().lower()
    folder_query = folder_input.value.strip().lower()
    return [
        v for v in all_videos
        if (not name_query or name_query in v['name'].lower())
        and (not folder_query or folder_query in v['folder'].lower())
    ]

def update_display(selected_index=None):
    global current_index
    matches = get_filtered_videos()
    video_gallery.clear()

    if not matches:
        ui.notify('No matching videos found.', type='warning')
        return

    if selected_index is not None and 0 <= selected_index < len(matches):
        current_index = selected_index
    else:
        current_index = 0

    if scroll_mode:
        v = matches[current_index]

        with video_gallery:
            with ui.row().style('position: relative; width: 100%; justify-content: center; align-items: center;'):

                if current_index > 0:
                    ui.button('‚¨ÖÔ∏è', on_click=lambda: update_display(current_index - 1)).props('flat color=primary').style(
                        'position: absolute; left: 10px; top: 50%; transform: translateY(-50%); font-size: 2rem;')

                with ui.column().style('max-width: 500px; width: 100%; align-items: center; gap: 10px;'):
                    ui.video(v['url']).props('autoplay muted loop').style('width: 100%; height: 300px; object-fit: contain; background-color: black; border-radius: 8px')
                    ui.label(v['name']).style('font-weight: bold; font-size: 1.1rem; color: white')
                    ui.label(f"Folder: {v['folder']}").style('font-size: 0.85rem; color: white')
                    annotation_input = ui.input(label='Enter annotation...').props('outlined').style('width: 100%;')
                    ui.button('üíæ Save Annotation', on_click=lambda: save_annotation(v['name'], annotation_input.value)).props('color=accent')

                if current_index < len(matches) - 1:
                    ui.button('‚û°Ô∏è', on_click=lambda: update_display(current_index + 1)).props('flat color=primary').style(
                        'position: absolute; right: 10px; top: 50%; transform: translateY(-50%); font-size: 2rem;')

    else:
        with video_gallery:
            with ui.row().style('flex-wrap: wrap; gap: 16px; justify-content: center;'):
                for v in matches:
                    with ui.card().props('class=bg-slate-800').style('width: 300px;'):
                        ui.video(v['url']).props('controls muted').style(
                            'width: 100%; height: 180px; object-fit: cover; background-color: black; border-radius: 8px')
                        ui.label(v['name']).style('font-weight: bold; font-size: 1.1rem; color: white; padding: 4px 0')
                        ui.label(f"Folder: {v['folder']}").style('font-size: 0.85rem; color: white; padding-bottom: 8px')

def save_annotation(video_name, annotation_text):
    if not annotation_text.strip():
        ui.notify('Annotation is empty.', type='warning')
        return
    with open(CSV_FILE, 'a', newline='') as f:
        writer = csv.writer(f)
        writer.writerow([video_name, annotation_text.strip()])
    ui.notify('Annotation saved ‚úÖ', type='positive')

def home():
    global scroll_mode
    scroll_mode = False
    name_input.set_value('')
    folder_input.set_value('')
    update_display()

def toggle_scroll():
    global scroll_mode
    scroll_mode = not scroll_mode
    ui.notify('Scroll mode ON.' if scroll_mode else 'Scroll mode OFF.', type='info')
    update_display(current_index)

ui.dark_mode()

ui.add_body_html("""
<style>
  body { background-color: #111827; margin: 0; padding: 0; font-family: system-ui, sans-serif; color: white; }
  label, input, .q-field__label { color: white !important; }
</style>
""")

with ui.column().style('max-width: 1000px; margin: auto; margin-top: 20px; gap: 20px;'):
    with ui.row().style('gap: 10px; flex-wrap: wrap; justify-content: start; align-items: center;'):
        ui.button('Home', on_click=home).props('color=primary')
        ui.button('Scroll', on_click=toggle_scroll).props('color=secondary')
        name_input = ui.input(label='Video Name').props('placeholder=Type name...').style('flex: 1')
        folder_input = ui.input(label='Folder Name').props('placeholder=Type folder...').style('flex: 1')

    name_input.on('keydown.enter', lambda e: update_display())
    folder_input.on('keydown.enter', lambda e: update_display())

    video_gallery = ui.column().style('width: 100%; align-items: center;')

scan_all_videos()
update_display()
ui.run(port=555)
